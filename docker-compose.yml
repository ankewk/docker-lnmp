version: '3.8'

services:
  # Nginx负载均衡器
  nginx-loadbalancer:
    image: nginx:alpine
    container_name: lnmp_nginx_loadbalancer
    ports:
      - "${NGINX_LB_PORT:-8889}:80"
      - "${NGINX_LB_SSL_PORT:-444}:443"
    volumes:
      - ./nginx/loadbalancer.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nginx-backend
    networks:
      - lnmp_network
    restart: unless-stopped

  # Nginx后端服务
  nginx-backend:
    image: nginx:alpine
    container_name: lnmp_nginx_backend
    ports:
      - "${NGINX_PORT:-8888}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./www:/var/www/html
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - php
    networks:
      - lnmp_network
    restart: unless-stopped

  # PHP服务 - 使用环境变量选择版本
  php:
    build:
      context: .
      dockerfile: Dockerfile.php
      args:
        PHP_VERSION: ${PHP_VERSION:-8.2-fpm-alpine}
    container_name: lnmp_php
    volumes:
      - ./www:/var/www/html
      - ./php/php.ini:/usr/local/etc/php/php.ini
      - ./php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf
    depends_on:
      - mysql-master
    networks:
      - lnmp_network
    restart: unless-stopped

  # MySQL Master服务 - 使用环境变量选择版本
  mysql-master:
    image: mysql:${MYSQL_VERSION:-8.0}
    container_name: lnmp_mysql_master
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-lnmp_db}
      MYSQL_USER: ${MYSQL_USER:-lnmp_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-lnmp123456}
    ports:
      - "${MYSQL_MASTER_PORT:-33306}:3306"
    volumes:
      - ./mysql/master-data:/var/lib/mysql
      - ./mysql/conf/master.cnf:/etc/mysql/conf.d/master.cnf
      - ./mysql/logs:/var/log/mysql
      - ./mysql/init-master.sql:/docker-entrypoint-initdb.d/init-master.sql
    networks:
      - lnmp_network
    restart: unless-stopped

  # MySQL Slave服务 - 使用环境变量选择版本
  mysql-slave:
    image: mysql:${MYSQL_VERSION:-8.0}
    container_name: lnmp_mysql_slave
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-lnmp_db}
      MYSQL_USER: ${MYSQL_USER:-lnmp_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-lnmp123456}
    ports:
      - "${MYSQL_SLAVE_PORT:-33307}:3307"
    volumes:
      - ./mysql/slave-data:/var/lib/mysql
      - ./mysql/conf/slave.cnf:/etc/mysql/conf.d/slave.cnf
      - ./mysql/logs:/var/log/mysql
      - ./mysql/setup-slave.sh:/docker-entrypoint-initdb.d/setup-slave.sh
    depends_on:
      - mysql-master
    networks:
      - lnmp_network
    restart: unless-stopped

  # Redis服务
  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    container_name: lnmp_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123456}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - lnmp_network
    restart: unless-stopped

  # MongoDB服务
  mongodb:
    image: mongo:${MONGODB_VERSION:-7}
    container_name: lnmp_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-mongodb123456}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-lnmp_mongo}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - ./mongodb/data:/data/db
      - ./mongodb/logs:/var/log/mongodb
    networks:
      - lnmp_network
    restart: unless-stopped

  # Kafka服务
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-7.4.0}
    container_name: lnmp_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - ./kafka/zookeeper/data:/var/lib/zookeeper/data
      - ./kafka/zookeeper/logs:/var/lib/zookeeper/log
    networks:
      - lnmp_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-7.4.0}
    container_name: lnmp_kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT:-9092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka/kafka/data:/var/lib/kafka/data
      - ./kafka/kafka/logs:/var/lib/kafka/logs
    networks:
      - lnmp_network
    restart: unless-stopped

  # RabbitMQ服务
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION:-3-management-alpine}
    container_name: lnmp_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq123456}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-/}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/logs:/var/log/rabbitmq
    networks:
      - lnmp_network
    restart: unless-stopped

  # phpMyAdmin服务（可选）
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: lnmp_phpmyadmin
    environment:
      PMA_HOST: mysql-master
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123456}
    ports:
      - "${PMA_PORT:-8080}:80"
    depends_on:
      - mysql-master
    networks:
      - lnmp_network
    restart: unless-stopped

  # Redis管理界面（可选）
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: lnmp_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-redis123456}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - lnmp_network
    restart: unless-stopped

networks:
  lnmp_network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  mongodb_data:
  kafka_data:
  rabbitmq_data: 