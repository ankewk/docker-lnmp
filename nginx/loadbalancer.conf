user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # 上游服务器组 - 后端Nginx服务器
    upstream backend_servers {
        # 轮询算法（默认）
        server nginx-backend:80 max_fails=3 fail_timeout=30s;
        
        # 可以添加更多后端服务器
        # server nginx-backend-2:80 max_fails=3 fail_timeout=30s;
        # server nginx-backend-3:80 max_fails=3 fail_timeout=30s;
        
        # 其他负载均衡算法选项：
        # least_conn;  # 最少连接数
        # ip_hash;     # IP哈希
        # hash $request_uri consistent;  # 一致性哈希
    }

    # 健康检查配置
    match health_check {
        status 200;
        header Content-Type = application/json;
        body ~ '"status":"healthy"';
    }

    # HTTP服务器
    server {
        listen 80;
        server_name localhost;
        
        # 访问日志
        access_log /var/log/nginx/lb_access.log main;
        error_log /var/log/nginx/lb_error.log warn;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","loadbalancer":"nginx"}';
            add_header Content-Type application/json;
        }

        # 负载均衡器状态页面
        location /lb-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        # 代理到后端服务器
        location / {
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }

        # 静态文件缓存
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 缓存设置
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # HTTPS服务器（可选）
    server {
        listen 443 ssl http2;
        server_name localhost;
        
        # SSL配置
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        
        # 访问日志
        access_log /var/log/nginx/lb_ssl_access.log main;
        error_log /var/log/nginx/lb_ssl_error.log warn;

        # 健康检查端点
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","loadbalancer":"nginx-ssl"}';
            add_header Content-Type application/json;
        }

        # 代理到后端服务器
        location / {
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时设置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
        }
    }
} 